#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
library(lubridate)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
install.packages("lubridate")
library(lubridate)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
library(ggplot2)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
View(test)
colnames(test)
install.packages("XML")
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
View(test)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
View(data_2019)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
?mdy_hm
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
test$TIMESTAMP_TS
class(test$TIMESTAMP_TS)
View(test)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS)
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- lubridate::mdy_hm(test$TIMESTAMP_TS)
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()

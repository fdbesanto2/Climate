#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
library(lubridate)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
install.packages("lubridate")
library(lubridate)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
library(ggplot2)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
View(test)
colnames(test)
install.packages("XML")
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
#can also split timestamp into two different columns and format from there
##library(tidyr)
##test <- test %>%
##separate(TIMESTAMP_TS, c("date", "time"), " ")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
View(test)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
View(data_2019)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz="EST")
?mdy_hm
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
test$TIMESTAMP_TS
class(test$TIMESTAMP_TS)
View(test)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS)
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- lubridate::mdy_hm(test$TIMESTAMP_TS)
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2019 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2019.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2019[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
View(test)
##split data to only show growing months (may - august)
test$day <- substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0)
View(test)
test_grow <- test[test$day >= 2019-05-01 & test$day <= 2019-08-31, ]
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= 2019-05-01 & test$day <= 2019-08-31, ]
View(test_grow)
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test_grow)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
#basic graphs of 5-minute averages:
##to make a pdf of any combination of graphs, simply do the following:
pdf(file="Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/plots/2017_Weather_Stats.pdf", width=12) #before running the graph scripts
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test_grow)
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
View(test)
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hms(test$TIMESTAMP_TS, tz = "EST")
View(test)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- ymd_hm(test$TIMESTAMP_TS, tz = "EST")
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
test$TIMESTAMP_TS
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
View(test)
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2019-05-01" & test$day <= "2019-08-31", ]
View(test)
View(test_grow)
View(test)
test_grow <- test[test$day >= "2018-05-01" & test$day <= "2018-08-31", ]
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#1 solar radiation Kipp&Zonen ####
ggplot(data = test_grow) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
library(dplyr)
q <- test_grow %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`))
library(esquisse)
esquisser()
View(test_grow)
q <- test_grow %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_Li_Avg_W/m2`))
esquisser()
library(lubridate)
library(ggplot2)
#read and reformat met data ####
data_2017 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2017.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
#remove unnecessary rows
test <- data_2017[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
pdf(file="Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/plots/2017_Weather_Stats.pdf", width=12) #before running the graph scripts
#1 solar radiation Kipp&Zonen ####
ggplot(data = test_grow) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
View(test)
#1 solar radiation Kipp&Zonen ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_KZ_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation Kipp&Zonen in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#2 solar radiation LiCOR ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RadTot_Li_Avg_W/m2`) +
geom_line(color = "#0c4c8a") +
ggtitle("Solar radiation LiCOR in 5-min. average") +
labs(x="Timestamp", y="Solar radiation (W/m2)") +
theme_grey()
#3 air temperature sensor 2 ####
##sensor 1 in 2018 regularly recorded temps of -60C
ggplot(test, aes(x=TIMESTAMP_TS)) +
#geom_line(aes(y = T_Air1_Avg_C, color = "Sensor 1")) +
geom_line(aes(y = T_Air2_Avg_C, color = "Sensor 2")) +
labs(title= "Air temperature by Sensor in 5-min. average", x= "Timestamp", y= "Air temperature (C)") +
theme(legend.position = "right") +
theme_grey()
#4 relative humidity ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `RH_Avg_%`) +
geom_line(color = "#0c4c8a") +
ggtitle("Relative Humidity in 5-min. average") +
labs(x="Timestamp", y="Relative humidity (%)") +
theme_grey()
#5 wind speed ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = `WS_WVc(1)_m/s`) +
geom_line(color = "#0c4c8a") +
ggtitle("Wind Speed in 5-min. average") +
labs(x="Timestamp", y="Wind Speed (m/s)") +
theme_grey()
#6 precipitation ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = Prec_Tot_mm) +
geom_line(color = "#0c4c8a") +
ggtitle("Precipitation in 5-min. average") +
labs(x="Timestamp", y="Precipitation(mm)") +
theme_grey()
#7 battery voltage of box ####
ggplot(data = test) +
aes(x = TIMESTAMP_TS, y = BattV_Avg_V) +
geom_line(color = "#0c4c8a") +
ggtitle("Battery voltage in 5-min. average") +
labs(x="Timestamp", y="Battery Volatage (V)") +
theme_grey()
dev.off() #after running the graph scripts
library(lubridate)
library(ggplot2)
library(dplyr)
#read and reformat met data ####
data_2018 <- read.csv("Met_Station_Data/SCBI/ForestGEO_met_station-SCBI/SCB_Metdata_5min_2018.csv", header=FALSE, stringsAsFactors = FALSE)
#remove unnecessary rows
test <- data_2018[-c(1,4),]
#combine descriptor rows (variable and unit) into one, then make them the headers
test <- rbind(paste0(test[1,], sep="_", test[2,]), test[3:nrow(test),], stringsAsFactors=FALSE)
colnames(test) <- test[1,]
test <- test[-1,]
#convert date into usable format
#"tz" should be changed depending on the location source of the weather data
test$TIMESTAMP_TS <- mdy_hm(test$TIMESTAMP_TS, tz = "EST")
#convert missing data code NaN to NA
test$`WS_WVc(1)_m/s` <- gsub("NAN", NA, test$`WS_WVc(1)_m/s`)
#convert data into numeric class
test[] <- lapply(test, function(x) {
if(is.character(x)) as.numeric(as.character(x)) else x
})
sapply(test, class)
##split data to only show growing months (may - august)
test$day <- as.Date(substr(test$TIMESTAMP_TS, 1, nchar(test$TIMESTAMP_TS)-0))
test_grow <- test[test$day >= "2018-05-01" & test$day <= "2018-08-31", ]
test_rad <- test_grow[c(1,3)]
test_rad$day <- substr(test_rad$TIMESTAMP_TS, 1, nchar(test_rad$TIMESTAMP_TS)-0)
View(test_rad)
colnames(test_rad[2])
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(RadTot_KZ_Avg_W/m2, na.rm=TRUE))
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum("RadTot_KZ_Avg_W/m2", na.rm=TRUE))
test_rad <- test_rad[!is.na(test_rad$TIMESTAMP_TS), ]
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(RadTot_KZ_Avg_W/m2, na.rm=TRUE))
View(test_rad)
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`, na.rm=TRUE))
View(q)
library(esquisse)
esquisser()
test_rad$day <- as.character(test_rad$day)
esquisser()
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_KZ_Avg_W/m2`))
View(test_rad)
View(test)
View(q)
q$day <- as.character(q$day)
esquisser()
ggplot(data=q) +
geom_bar(aes(x=day, y=total_Rad))
ggplot(q, aes(day, total_Rad)) +
geom_bar() +
theme_minimal()
ggplot(q, aes(day, total_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
test_rad <- test_grow[c(1,5)]
test_rad$day <- substr(test_rad$TIMESTAMP_TS, 1, nchar(test_rad$TIMESTAMP_TS)-0)
test_rad$day <- as.character(test_rad$day)
test_rad <- test_rad[!is.na(test_rad$TIMESTAMP_TS), ]
q <- test_rad %>%
group_by(day) %>%
summarize(total_Rad = sum(`RadTot_Li_Avg_W/m2`))
q$day <- as.character(q$day)
ggplot(q, aes(day, total_Rad)) +
geom_bar(stat="identity") +
theme_minimal()
